# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - none

parameters:

  - name: "ResourceGroupBaseName"
    type: string
    default: "rg-myexperiments-logicapps"

  - name: "Environment"
    type: string
    default: "dev"

  - name: "Location"
    type: string
    default: "westeurope"

  - name: "ServiceConnection"
    type: string
    default: "azure_visual_studio_subscription"

variables:

    resourceGroupName: '${{ parameters.ResourceGroupBaseName }}-${{ parameters.Environment }}'
    location: '${{ parameters.Location }}' 
    devServiceConnection: '${{ parameters.ServiceConnection }}'
    logicAppCIArtifactName: 'logicapp_publish_artifact_${{ parameters.Environment }}'
    azureSubscription: '${{ parameters.ServiceConnection }}'
stages:
  - stage: stage_logic_app_build
    displayName: "Build and publish logic app"
    jobs:
      - job: logic_app_build
        displayName: "Build and publish logic app"
        steps:
          - task: CopyFiles@2
            displayName: "Create project folder"
            inputs:
              SourceFolder: "$(System.DefaultWorkingDirectory)"
              Contents: |
                host.json
                proxies.json
                TheCatApp/**
                StatelessHello/**
              TargetFolder: "project_output"

          - task: ArchiveFiles@2
            displayName: "Create project zip"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)/project_output"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
              replaceExistingArchive: true

          - task: PublishPipelineArtifact@1
            displayName: "Publish project zip artifact"
            inputs:
              targetPath: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
              artifact: "$(logicAppCIArtifactName)"
              publishLocation: "pipeline"
  
  - stage: stage_resource_deployment
    displayName: "Deploy logic app resources"
    jobs:
      - job: resource_deployment
        displayName: "Deploy logic app resources from bicep"
        steps:
          - task: AzureCLI@2
            displayName: "Deploy from bicep using azure cli"
            inputs:
              azureSubscription: '$(azureSubscription)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
              
                az group create --name '$(resourceGroupName)' --location '$(location)'
                az deployment group create --resource-group '$(resourceGroupName)' --name logic_app_deploy \
                  --template-file deploy/logicapp-template.bicep \
                  --parameters environment='${{ parameters.Environment }}'
                
                deploymentoutputs=$(az deployment group show --resource-group '$(resourceGroupName)' --name logic_app_deploy \
                  --query properties.outputs)
                
                echo 'convert outputs to variables'
                echo $deploymentoutputs | jq -c '. | to_entries[] | [.key, .value.value]' |
                  while IFS=$"\n" read -r c; do
                    outputname=$(echo "$c" | jq -r '.[0]')
                    outputvalue=$(echo "$c" | jq -r '.[1]')
                    echo "setting variable $outputname=$outputvalue"
                    echo "##vso[task.setvariable variable=$outputname;isOutput=true]$outputvalue"
                  done

  - stage: stage_logic_app_deployment
    dependsOn: stage_resource_deployment
    displayName: "Deploy logic app"
    jobs:
      - job: logic_app_deployment
        displayName: Deploy Logic App
        variables:
          logicAppName: $[ stageDependencies.stage_resource_deployment.resource_deployment.outputs['logicAppName'] ]
        steps:
        - task: AzureFunctionApp@1
          displayName: 'Deploy logic app workflows'
          inputs:
            azureSubscription: '$(azureSubscription)'
            appType: 'functionApp'
            appName: '$(logicAppName)'
            package: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
            deploymentMethod: 'zipDeploy'